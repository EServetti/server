
<div class="main" style="display:flex; justify-content:center; ">
  <div id="uid" style="display: none;">{{info.uid}}</div>
  <div class="cartCont" id="cartCont" style="height:100%;width:90%;min-height:100vh;margin: 30px 0 0 0; display: flex; flex-wrap: wrap; justify-content:center;
     border-radius:20px;
     background-image: url('/img/cart-back-image.jpg'); background-size: cover;
     background-position: center; "></div>
</div>
<div class="finish" style="display: flex;justify-content:center; align-items:center">
      <button
        onclick="cancel()"
        class="cancel"
        id="cancel"
        style="align-self: center; margin-top:5px;margin-right:10px; cursor:pointer;  padding: 10px 20px;  border-radius: 5px;  border: none; color:white; background-color:red"
      >Cancel buy</button>
      <button
    onclick="finish()"
    class="finish"
    id="finish"
    style="align-self: center; margin-top:5px;margin-left:10px; cursor:pointer;  padding: 10px 20px;  border-radius: 5px; border: none; color:white; background-color:green"
    >Finish buy</button>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
socket.on("here", message => {
  console.log(message)
  const uid = document.querySelector("#uid").textContent.trim();
  socket.emit("uid", uid);
})


socket.on("cart", allCarts => {
  const content = allCarts.map(each => `
  <div style="margin-top: 30px;">
      <div
        class="productCont"
        id="productCont"
        style=" width:350px;height:min-content;display:flex;justify-content:center;align-items:center;flex-direction:column;background-color:white; padding: 0 10px 0 10px; margin: 10px 30px 10px 30px; border: 1px solid black; border-radius:10px"
      >
        <img
          src=${each.product_id.photo}
          class="productImage"
          style="width: 300px; height: 300px; margin: 10px 0 0 0;border: 1px solid #6781B4; border-radius:10px"
        />
        <div
          class="productInfo"
          style="display: flex; justify-content:center;  flex-direction:column; align-items: center;  "
        >
        <span>Price $${each.product_id.price}</span>
        <span>The quantity of ${each.quantity}</span>
        <div class="quantCont" style="display: flex; justify-content:center; align-items:center">
        <div style="display: flex; justify-content: center; flex-direction: column">
        <div>
        <input class="changeQuantity" id="changeQuantity" placeholder="How many do you want?" type="number" min="1"
        style="margin: 0 0 10px 0; width: 200px;">
        <button onclick="changeQuantity(this)" style="align-self: center; margin-top:5px;margin-left:5px; cursor:pointer;  padding: 5px 10px;border:none;border-radius: 5px;">Send</button>
        </div>
        <button onclick="deleteCart(this)" style="color: white; background-color: red;align-self: center; margin-top:5px;margin-bottom:10px; cursor:pointer;  padding: 5px 10px;border:none;border-radius: 5px;">Delete</button>
        </div>
        </div>
        <h6 id="_id" style="display: none;">${each._id}</h6>
      </div>
      </div>
      </div>
  `).reverse().join("");
  document.querySelector("#cartCont").innerHTML = content;
})

socket.on("anything", message => {
  const content = `<h1 style="color: white; margin-top: 50px;display: flex;align-items: center; ">${message}</h1>`;
  document.querySelector("#cartCont").innerHTML = content;
})

 //actualiza la cantidad a comprar
  function changeQuantity(button) {
    const productCont = button.closest(".productCont"); // Encuentra el elemento padre con la clase "productCont"
    const cid = productCont.querySelector("#_id").textContent.trim(); // Busca el elemento hijo con el id "_id"
    const quantityInput = productCont.querySelector("#changeQuantity"); // Busca el input de cantidad dentro del mismo contenedor
    const quantity = quantityInput.value.trim(); // Obtiene el valor del input de cantidad
    const uid = document.querySelector("#uid").textContent.trim();
    const info = {
      cid: cid,
      quantity: quantity,
      uid: uid
    }
    socket.emit("quantity", info)
  }

  //Elimina un producto de el carrito
  function deleteCart(button) {
    const productInfo = button.parentElement.parentElement.parentElement;
    const cid = productInfo.querySelector("#_id").textContent;
    const uid = document.querySelector("#uid").textContent.trim();
    const info = {
      cid: cid,
      uid: uid
    }
    socket.emit("delete", info)
  }

  //Cancela compra
  function cancel(){
  const token = document.cookie
  socket.emit("cancel", token)
  socket.on("canceled", () => {
      location.reload();
    })
  }

  //Finaliza compra
  function finish(){
  const uid = document.querySelector("#uid").textContent.trim();
  const info = {
    uid: uid,
  }
  socket.emit("finish", info)
  socket.on("completed", () => {
      location.reload();
    })
  }

</script>